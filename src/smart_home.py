import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
import os
from datetime import datetime

# ====================== C·∫§U H√åNH ·ª®NG D·ª§NG ======================
st.set_page_config(
    page_title="B·∫£ng ƒêi·ªÅu Khi·ªÉn NƒÉng L∆∞·ª£ng Th√¥ng Minh",
    layout="wide",
    page_icon="üè†",
    initial_sidebar_state="expanded"
)

# ====================== KHAI B√ÅO H·∫∞NG S·ªê ======================
THIET_BI = [
    'Dishwasher [kW]', 'Furnace 1 [kW]', 'Furnace 2 [kW]',
    'Home office [kW]', 'Fridge [kW]', 'Wine cellar [kW]',
    'Garage door [kW]', 'Kitchen 12 [kW]', 'Kitchen 14 [kW]',
    'Kitchen 38 [kW]', 'Barn [kW]', 'Well [kW]',
    'Microwave [kW]', 'Living room [kW]', 'Solar [kW]'
]

THOI_TIET = [
    'temperature', 'humidity', 'windSpeed', 
    'windBearing', 'pressure', 'apparentTemperature',
    'dewPoint', 'precipProbability'
]

# ====================== TI·ªÄN X·ª¨ L√ù D·ªÆ LI·ªÜU ======================
@st.cache_data
@st.cache_data
def load_data():
    try:
        # ƒê∆∞·ªùng d·∫´n t·ªõi file d·ªØ li·ªáu (ƒëi·ªÅu ch·ªânh cho ph√π h·ª£p)
        file_path = os.path.join("data", "HomeC.csv")
        
        # ƒê·ªçc d·ªØ li·ªáu
        data = pd.read_csv(file_path, low_memory=False)
        
        # X·ª≠ l√Ω d·ªØ li·ªáu
        data = data[:-1]  # X√≥a d√≤ng cu·ªëi n·∫øu c√≥ NaN
        
        # Chuy·ªÉn ƒë·ªïi c·ªôt time - x·ª≠ l√Ω l·ªói n·∫øu c√≥
        if 'time' in data.columns:
            try:
                # Th·ª≠ chuy·ªÉn ƒë·ªïi t·ª´ Unix timestamp
                data['datetime'] = pd.to_datetime(data['time'], unit='s', errors='coerce')
                
                # N·∫øu kh√¥ng th√†nh c√¥ng, th·ª≠ chuy·ªÉn ƒë·ªïi tr·ª±c ti·∫øp
                if data['datetime'].isnull().any():
                    data['datetime'] = pd.to_datetime(data['time'], errors='coerce')
                
                # ƒê·∫∑t index l√† datetime
                data = data.set_index('datetime')
                data = data.sort_index()
                
            except Exception as e:
                st.error(f"L·ªói chuy·ªÉn ƒë·ªïi th·ªùi gian: {str(e)}")
                # T·∫°o timeline m·∫´u n·∫øu c·∫ßn
                data['datetime'] = pd.date_range(start='2016-01-01', periods=len(data), freq='min')
                data = data.set_index('datetime')
        
        return data.dropna()
    
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu: {str(e)}")
        return None
def calculate_daily(df, power_col='use [kW]'):
    if power_col not in df.columns:
        return pd.DataFrame()
    # ƒê·∫£m b·∫£o ch·ªâ t√≠nh to√°n tr√™n c·ªôt s·ªë
    return df[[power_col]].resample('D').sum() / 60  # kW -> kWh
def calculate_hourly(df, power_col='use [kW]'):
    """T√≠nh t·ªïng c√¥ng su·∫•t theo t·ª´ng gi·ªù (kWh)"""
    if power_col not in df.columns:
        return pd.DataFrame()
    # T√≠nh t·ªïng theo gi·ªù v√† chuy·ªÉn t·ª´ kW sang kWh (t√≠ch ph√¢n c√¥ng su·∫•t)
    return df[[power_col]].resample('H').sum() / 60  # kW * 1h = kWh
def calculate_hourly_for_gen(df, power_col='gen [kW]'):
    """T√≠nh t·ªïng c√¥ng su·∫•t theo t·ª´ng gi·ªù (kWh)"""
    if power_col not in df.columns:
        return pd.DataFrame()
    # T√≠nh t·ªïng theo gi·ªù v√† chuy·ªÉn t·ª´ kW sang kWh (t√≠ch ph√¢n c√¥ng su·∫•t)
    return df[[power_col]].resample('H').sum() / 60  # kW * 1h = kWh

@st.cache_data
def xu_ly_du_lieu(_df):
    """X·ª≠ l√Ω v√† l√†m gi√†u d·ªØ li·ªáu"""
    if _df is None:
        return None
        
    df = _df.copy()
    
    try:
        # Th√™m c√°c ƒë·∫∑c tr∆∞ng th·ªùi gian
        df['date'] = df.index.date
        df['hour'] = df.index.hour
        df['day_of_week'] = df.index.dayofweek
        df['month'] = df.index.month
        df['day_name'] = df.index.day_name()
        df['weekend'] = df['day_of_week'].isin([5, 6])
        
        # T√≠nh to√°n nƒÉng l∆∞·ª£ng
        df['net_energy'] = df['use [kW]'] - df['gen [kW]']
        df['energy_ratio'] = np.where(
            df['use [kW]'] > 0,
            df['gen [kW]'] / df['use [kW]'],
            0
        )
        
        return df
        
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")
        return None

# ====================== TH√ÄNH PH·∫¶N GIAO DI·ªÜN ======================
def loc_ngay(df, key):
    """Hi·ªÉn th·ªã b·ªô l·ªçc ng√†y"""
    try:
        min_date = df['date'].min()
        max_date = df['date'].max()
        
        return st.date_input(
            "Ch·ªçn kho·∫£ng th·ªùi gian",
            [min_date, max_date],
            key=key,
            min_value=min_date,
            max_value=max_date
        )
    except Exception as e:
        st.error(f"L·ªói hi·ªÉn th·ªã b·ªô l·ªçc: {str(e)}")
        return None

def hien_thi_chi_so(df):
    """Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë nƒÉng l∆∞·ª£ng quan tr·ªçng"""
    if df is None:
        return
        
    cols = st.columns(4)
    metrics = [
        ("T·ªïng ti√™u th·ª•", 'use [kW]', "sum", "T·ªïng nƒÉng l∆∞·ª£ng ƒë√£ s·ª≠ d·ª•ng"),
        ("T·ªïng s·∫£n xu·∫•t", 'gen [kW]', "sum", "T·ªïng nƒÉng l∆∞·ª£ng t·∫°o ra"),
        ("NƒÉng l∆∞·ª£ng r√≤ng", 'net_energy', "sum", "NƒÉng l∆∞·ª£ng th·ª±c t·∫ø (d√πng - t·∫°o)"),
        ("T·ª± cung c·∫•p", None, "ratio", "Ph·∫ßn trƒÉm nhu c·∫ßu ƒë∆∞·ª£c t·ª± ƒë√°p ·ª©ng")
    ]
    
    for i, (ten, cot, loai, giai_thich) in enumerate(metrics):
        with cols[i]:
            try:
                if loai == "sum":
                    gia_tri = df[cot].sum()
                    st.metric(ten, f"{gia_tri:,.0f} kW", help=giai_thich)
                elif loai == "ratio":
                    ty_le = (df['gen [kW]'].sum() / df['use [kW]'].sum() * 100 
                           if df['use [kW]'].sum() > 0 else 0)
                    st.metric(ten, f"{ty_le:.1f}%", help=giai_thich)
            except Exception as e:
                st.error(f"L·ªói t√≠nh to√°n {ten}: {str(e)}")

# ====================== TRANG B·∫¢NG ƒêI·ªÄU KHI·ªÇN ======================
def trang_tong_quan(data):
    """Trang t·ªïng quan nƒÉng l∆∞·ª£ng"""
    st.header("üè† T·ªïng Quan NƒÉng L∆∞·ª£ng")
    
    if data is None:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu")
        return
        
    if 'use [kW]' not in data.columns:
        st.error("Kh√¥ng t√¨m th·∫•y c·ªôt 'use [kW]' trong d·ªØ li·ªáu")
        st.write("C√°c c·ªôt s·ªë c√≥ s·∫µn:", data.columns.tolist())
        return
    
    start_date = data.index.min().date()
    end_date = data.index.max().date()
    
    if start_date > end_date:
        st.error("Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu!")
        return
    
    try:
        filtered = data.loc[f"{start_date}":f"{end_date}"]
        filtered = filtered.select_dtypes(include=['number'])
        daily_energy = calculate_daily(filtered)
        hourly_energy = calculate_hourly(filtered)           
        hourly_data_gen = calculate_hourly_for_gen(filtered)
        
        tab1, tab2 = st.tabs(["NƒÇNG L∆Ø·ª¢NG TI√äU TH·ª§ V√Ä S·∫¢N XU·∫§T H·∫∞NG NG√ÄY", "T·ªîNG H·ª¢P NƒÇNG L∆Ø·ª¢NG TI√äU TH·ª§ V√Ä S·∫¢N XU·∫§T THEO NG√ÄY"])
        
        with tab1:
            valid_dates = pd.Series(filtered.index.date).unique()
            
            if len(valid_dates) == 0:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn")
                return
                
            selected_date = st.selectbox(
                "Ch·ªçn ng√†y ƒë·ªÉ xem chi ti·∫øt",
                options=valid_dates,
                format_func=lambda x: x.strftime("%d/%m/%Y")
            )
            st.markdown("") 
            # 
            hourly_data = hourly_energy[hourly_energy.index.date == selected_date]

            
            # T√≠nh to√°n c√°c ch·ªâ s·ªë
            daily_total = hourly_data['use [kW]'].sum()
            max_hour = hourly_data['use [kW]'].idxmax()
            max_value = hourly_data['use [kW]'].max()
            avg_value = hourly_data['use [kW]'].mean()

            # Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë d∆∞·ªõi d·∫°ng columns
            cols = st.columns(3)
            cols[0].metric("T·ªïng nƒÉng l∆∞·ª£ng ti√™u th·ª•", f"{daily_total:.2f} kWh")
            cols[1].metric("Gi·ªù cao ƒëi·ªÉm", max_hour.strftime('%H:%M'), f"{max_value:.2f} kWh")
            cols[2].metric("Trung b√¨nh/gi·ªù", f"{avg_value:.2f} kWh")
         
            st.markdown("---")   
            # T√≠nh to√°n l·∫°i hourly_data_gen cho ng√†y ƒë√£ ch·ªçn
            hourly_data_gen = hourly_data_gen[hourly_data_gen.index.date == selected_date]
            # T√≠nh to√°n c√°c ch·ªâ s·ªë
            daily_total_gen = hourly_data_gen['gen [kW]'].sum()
            max_hour_gen = hourly_data_gen['gen [kW]'].idxmax()
            max_value_gen = hourly_data_gen['gen [kW]'].max()
            avg_value_gen = hourly_data_gen['gen [kW]'].mean()
            
            # Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë d∆∞·ªõi d·∫°ng columns
            cols = st.columns(3)
            cols[0].metric("T·ªïng nƒÉng l∆∞·ª£ng s·∫£n xu·∫•t", f"{daily_total_gen:.2f} kWh")
            cols[1].metric("Gi·ªù cao ƒëi·ªÉm", max_hour_gen.strftime('%H:%M'), f"{max_value_gen:.2f} kWh")
            cols[2].metric("Trung b√¨nh/gi·ªù", f"{avg_value_gen:.2f} kWh")
            
 
            # Hai bi·ªÉu ƒë·ªì n√†y s·∫Ω hi·ªÉn th·ªã nƒÉng l∆∞·ª£ng ti√™u th·ª• v√† s·∫£n xu·∫•t theo gi·ªù cho ng√†y ƒë√£ ch·ªçn
            if not hourly_data.empty and not hourly_data_gen.empty:
                combined_data = hourly_data[['use [kW]']].join(hourly_data_gen[['gen [kW]']], how='outer').fillna(0)

                fig = px.line(
                    combined_data,
                    x=combined_data.index,
                    y=['use [kW]', 'gen [kW]'],
                    title=f"NƒÉng l∆∞·ª£ng ti√™u th·ª• v√† s·∫£n xu·∫•t theo gi·ªù - Ng√†y {selected_date.strftime('%d/%m/%Y')}",
                    labels={'value': 'NƒÉng l∆∞·ª£ng (kWh)', 'datetime': 'Gi·ªù', 'variable': 'Lo·∫°i nƒÉng l∆∞·ª£ng'},
                    markers=True
                )

                fig.update_traces(line=dict(width=3), marker=dict(size=8))

                fig.update_layout(
                    xaxis_tickformat='%H:%M',
                    hovermode="x unified",
                    yaxis_title="NƒÉng l∆∞·ª£ng (kWh)",
                    xaxis_title="Th·ªùi gian",
                    legend_title_text='Lo·∫°i nƒÉng l∆∞·ª£ng'
                )

                max_use_idx = combined_data['use [kW]'].idxmax()
                max_use_val = combined_data['use [kW]'].max()
                fig.add_annotation(
                    x=max_use_idx,
                    y=max_use_val,
                    text=f"Max ti√™u th·ª•: {max_use_val:.2f} kWh",
                    showarrow=True,
                    arrowhead=1,
                    ax=0,
                    ay=-40
                )

                max_gen_idx = combined_data['gen [kW]'].idxmax()
                max_gen_val = combined_data['gen [kW]'].max()
                fig.add_annotation(
                    x=max_gen_idx,
                    y=max_gen_val,
                    text=f"Max s·∫£n xu·∫•t: {max_gen_val:.2f} kWh",
                    showarrow=True,
                    arrowhead=1,
                    ax=0,
                    ay=-40
                )

                st.plotly_chart(fig, use_container_width=True)

            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†y ƒë∆∞·ª£c ch·ªçn")

        
        with tab2:
          # L·∫•y ph·∫°m vi ng√†y c√≥ s·∫µn trong d·ªØ li·ªáu
            min_date = data.index.min().date()
            max_date = data.index.max().date()

            # T·∫°o giao di·ªán ch·ªçn ng√†y
            col1, col2 = st.columns(2)
            with col1:
                start_date = st.date_input("T·ª´ ng√†y", 
                                        min_date, 
                                        min_value=min_date, 
                                        max_value=max_date,
                                        key="start_date_selector")
            with col2:
                end_date = st.date_input("ƒê·∫øn ng√†y", 
                                    max_date, 
                                    min_value=min_date, 
                                    max_value=max_date,
                                    key="end_date_selector")

            # Ki·ªÉm tra h·ª£p l·ªá ng√†y
            if start_date > end_date:
                st.error("Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu!")
                st.stop()

            try:
                # L·ªçc d·ªØ li·ªáu theo kho·∫£ng ng√†y ƒë√£ ch·ªçn
                date_mask = (data.index.date >= start_date) & (data.index.date <= end_date)
                filtered_data = data.loc[date_mask]
                
                # T√≠nh to√°n nƒÉng l∆∞·ª£ng theo ng√†y
                daily_energy = filtered_data['use [kW]'].resample('D').sum() / 60  # Chuy·ªÉn t·ª´ kW sang kWh
                
                if not daily_energy.empty:
                    # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt
                    fig = px.bar(
                        daily_energy,
                        x=daily_energy.index,
                        y='use [kW]',
                        title=f"T·ªîNG NƒÇNG L∆Ø·ª¢NG TI√äU TH·ª§<br>T·ª´ {start_date.strftime('%d/%m/%Y')} ƒë·∫øn {end_date.strftime('%d/%m/%Y')}",
                        labels={'use [kW]': 'NƒÉng l∆∞·ª£ng (kWh)', 'index': 'Ng√†y'},
                        color_discrete_sequence=['#3498db']
                    )
                    
                    # T√πy ch·ªânh bi·ªÉu ƒë·ªì
                    fig.update_layout(
                        xaxis_tickformat='%d/%m',
                        hovermode="x unified",
                        plot_bgcolor='white',
                        height=450
                    )
                    
                    # Hi·ªÉn th·ªã gi√° tr·ªã tr√™n m·ªói c·ªôt
                    fig.update_traces(
                        hovertemplate="<b>%{x|%d/%m/%Y}</b><br>%{y:.2f} kWh",
                        texttemplate='%{y:.1f}',
                        textposition='outside'
                    )
                    
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # T√≠nh to√°n c√°c ch·ªâ s·ªë
                    total_energy = daily_energy.sum()
                    avg_energy = daily_energy.mean()
                    total_days = len(daily_energy)
                    
                    # Hi·ªÉn th·ªã th√¥ng s·ªë t·ªïng h·ª£p
                    col1, col2, col3 = st.columns(3)
                    col1.metric(
                        label="T·ªîNG NƒÇNG L∆Ø·ª¢NG", 
                        value=f"{total_energy:,.2f} kWh",
                        delta=f"{total_days} ng√†y"
                    )
                    col2.metric(
                        label="TRUNG B√åNH NG√ÄY", 
                        value=f"{avg_energy:,.2f} kWh"
                    )
                    col3.metric(
                        label="HI·ªÜU SU·∫§T CAO NH·∫§T", 
                        value=f"{daily_energy.max():.2f} kWh",
                        delta=f"Ng√†y {daily_energy.idxmax().strftime('%d/%m')}"
                    )
                    
                else:
                    st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ {start_date.strftime('%d/%m/%Y')} ƒë·∫øn {end_date.strftime('%d/%m/%Y')}")
                    st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")
            except Exception as e:
                st.error(f"C√≥ l·ªói x·∫£y ra: {str(e)}")
                st.stop()
    except Exception as e:
        st.error(f"C√≥ l·ªói x·∫£y ra: {str(e)}")
        st.stop()


def trang_thiet_bi(df):
    """Trang ph√¢n t√≠ch theo thi·∫øt b·ªã"""
    st.header("üîå Ph√¢n T√≠ch Theo Thi·∫øt B·ªã")
    
    if df is None:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu")
        return
        
    khoang_ngay = loc_ngay(df, "thiet_bi")
    df_loc = df[(df['date'] >= khoang_ngay[0]) & (df['date'] <= khoang_ngay[1])]
    
    thiet_bi_chon = st.multiselect(
        "Ch·ªçn thi·∫øt b·ªã ƒë·ªÉ ph√¢n t√≠ch",
        THIET_BI,
        default=THIET_BI[:3]
    )
    
    if not thiet_bi_chon:
        st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt thi·∫øt b·ªã")
        return
    
    st.markdown("---")
    
    try:
        tong_thiet_bi = df_loc[thiet_bi_chon].sum().sort_values(ascending=False)
        cols = st.columns(len(thiet_bi_chon))
        for i, (thiet_bi, tong) in enumerate(tong_thiet_bi.items()):
            with cols[i]:
                st.metric(
                    thiet_bi.replace(" [kW]", ""),
                    f"{tong:,.0f} kW",
                    help=f"T·ªïng ti√™u th·ª• c·ªßa {thiet_bi}"
                )
    except Exception as e:
        st.error(f"L·ªói t√≠nh to√°n t·ªïng thi·∫øt b·ªã: {str(e)}")
    
    tab1, tab2, tab3 = st.tabs(["üìä Ph√¢n b·ªï", "‚è± Xu h∆∞·ªõng", "üîó T∆∞∆°ng quan"])
    
    with tab1:
        col1, col2 = st.columns(2)
        with col1:
            try:
                fig = px.pie(
                    tong_thiet_bi,
                    values=tong_thiet_bi.values,
                    names=tong_thiet_bi.index.str.replace(" [kW]", ""),
                    title='T·ª∑ l·ªá ti√™u th·ª• theo thi·∫øt b·ªã'
                )
                st.plotly_chart(fig, use_container_width=True)
            except Exception as e:
                st.error(f"L·ªói hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√≤n: {str(e)}")
        
        with col2:
            try:
                fig = px.bar(
                    tong_thiet_bi.reset_index(),
                    x='index',
                    y=0,
                    title='T·ªïng ti√™u th·ª• theo thi·∫øt b·ªã',
                    labels={'index': 'Thi·∫øt b·ªã', '0': 'NƒÉng l∆∞·ª£ng (kW)'}
                )
                st.plotly_chart(fig, use_container_width=True)
            except Exception as e:
                st.error(f"L·ªói hi·ªÉn th·ªã bi·ªÉu ƒë·ªì c·ªôt: {str(e)}")
    
    with tab2:
        try:
            fig = px.line(
                df_loc.set_index('datetime')[thiet_bi_chon].resample('D').mean().reset_index(),
                x='datetime',
                y=thiet_bi_chon,
                title='Xu h∆∞·ªõng s·ª≠ d·ª•ng h√†ng ng√†y',
                labels={'value': 'C√¥ng su·∫•t (kW)', 'datetime': 'Ng√†y'}
            )
            st.plotly_chart(fig, use_container_width=True)
        except Exception as e:
            st.error(f"L·ªói hi·ªÉn th·ªã xu h∆∞·ªõng: {str(e)}")
    
    with tab3:
        try:
            fig = px.imshow(
                df_loc[thiet_bi_chon].corr(),
                text_auto=True,
                aspect="auto",
                title='M·ªëi t∆∞∆°ng quan gi·ªØa c√°c thi·∫øt b·ªã',
                color_continuous_scale='RdBu',
                zmin=-1,
                zmax=1
            )
            st.plotly_chart(fig, use_container_width=True)
        except Exception as e:
            st.error(f"L·ªói hi·ªÉn th·ªã ma tr·∫≠n t∆∞∆°ng quan: {str(e)}")

def trang_thoi_tiet(df):
    """Trang ph√¢n t√≠ch ·∫£nh h∆∞·ªüng th·ªùi ti·∫øt"""
    st.header("üå§Ô∏è ·∫¢nh H∆∞·ªüng Th·ªùi Ti·∫øt")
    
    if df is None:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu")
        return
        
    khoang_ngay = loc_ngay(df, "thoi_tiet")
    df_loc = df[(df['date'] >= khoang_ngay[0]) & (df['date'] <= khoang_ngay[1])]
    
    cols = st.columns(4)
    cac_thong_so = [
        ('temperature', 'üå°Ô∏è Nhi·ªát ƒë·ªô TB', '¬∞C'),
        ('humidity', 'üíß ƒê·ªô ·∫©m TB', '%'),
        ('windSpeed', 'üå¨Ô∏è T·ªëc ƒë·ªô gi√≥ TB', ' km/h'),
        ('pressure', '‚è≤Ô∏è √Åp su·∫•t TB', ' hPa')
    ]
    
    for i, (cot, ten, don_vi) in enumerate(cac_thong_so):
        with cols[i]:
            try:
                gia_tri_tb = df_loc[cot].mean()
                st.metric(ten, f"{gia_tri_tb:.1f}{don_vi}")
            except Exception as e:
                st.error(f"L·ªói t√≠nh to√°n {ten}: {str(e)}")
    
    st.markdown("---")
    
    tab1, tab2 = st.tabs(["üå¶ Xu h∆∞·ªõng", "‚ö° M·ªëi quan h·ªá"])
    
    with tab1:
        col1, col2 = st.columns(2)
        with col1:
            try:
                fig = px.line(
                    df_loc.set_index('datetime')[['temperature', 'apparentTemperature']].resample('D').mean().reset_index(),
                    x='datetime',
                    y=['temperature', 'apparentTemperature'],
                    title='Xu h∆∞·ªõng nhi·ªát ƒë·ªô',
                    labels={'value': 'Nhi·ªát ƒë·ªô (¬∞C)', 'datetime': 'Ng√†y'}
                )
                st.plotly_chart(fig, use_container_width=True)
            except Exception as e:
                st.error(f"L·ªói hi·ªÉn th·ªã nhi·ªát ƒë·ªô: {str(e)}")
        
        with col2:
            try:
                fig = px.line(
                    df_loc.set_index('datetime')[['humidity', 'dewPoint']].resample('D').mean().reset_index(),
                    x='datetime',
                    y=['humidity', 'dewPoint'],
                    title='ƒê·ªô ·∫©m & ƒêi·ªÉm s∆∞∆°ng',
                    labels={'value': 'Gi√° tr·ªã', 'datetime': 'Ng√†y'}
                )
                st.plotly_chart(fig, use_container_width=True)
            except Exception as e:
                st.error(f"L·ªói hi·ªÉn th·ªã ƒë·ªô ·∫©m: {str(e)}")
    
    with tab2:
        col1, col2 = st.columns(2)
        with col1:
            try:
                mau_df = df_loc.sample(min(1000, len(df_loc)))
                fig = px.scatter(
                    mau_df,
                    x='temperature',
                    y='use [kW]',
                    color='hour',
                    trendline="lowess",
                    title='Nhi·ªát ƒë·ªô vs Ti√™u th·ª•',
                    labels={'temperature': 'Nhi·ªát ƒë·ªô (¬∞C)', 'use [kW]': 'C√¥ng su·∫•t (kW)'}
                )
                st.plotly_chart(fig, use_container_width=True)
            except Exception as e:
                st.error(f"L·ªói hi·ªÉn th·ªã bi·ªÉu ƒë·ªì nhi·ªát ƒë·ªô: {str(e)}")
        
        with col2:
            try:
                fig = px.scatter(
                    df_loc.sample(min(1000, len(df_loc))),
                    x='humidity',
                    y='use [kW]',
                    color='temperature',
                    trendline="lowess",
                    title='ƒê·ªô ·∫©m vs Ti√™u th·ª•',
                    labels={'humidity': 'ƒê·ªô ·∫©m (%)', 'use [kW]': 'C√¥ng su·∫•t (kW)'}
                )
                st.plotly_chart(fig, use_container_width=True)
            except Exception as e:
                st.error(f"L·ªói hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ƒë·ªô ·∫©m: {str(e)}")

# ====================== ·ª®NG D·ª§NG CH√çNH ======================
def main():
    # T·∫£i d·ªØ li·ªáu
    with st.spinner("ƒêang t·∫£i d·ªØ li·ªáu..."):
        df = load_data()
    
    # X·ª≠ l√Ω d·ªØ li·ªáu
    with st.spinner("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu..."):
        df_xu_ly = xu_ly_du_lieu(df)
    
    # Thanh ƒëi·ªÅu h∆∞·ªõng
    with st.sidebar:
        st.title("üè† ƒêi·ªÅu H∆∞·ªõng")
        
        
        trang = st.radio(
            "Ch·ªçn trang",
            ["üè† T·ªïng quan", "üîå Thi·∫øt b·ªã", "üå§Ô∏è Th·ªùi ti·∫øt"],
            index=0
        )
        
        st.markdown("---")
        st.markdown("**T√≥m t·∫Øt d·ªØ li·ªáu**")
        
        if df_xu_ly is not None:
            try:
                st.metric("Kho·∫£ng th·ªùi gian", 
                         f"{df_xu_ly['date'].min().strftime('%d/%m/%Y')} ƒë·∫øn "
                         f"{df_xu_ly['date'].max().strftime('%d/%m/%Y')}")
            except Exception as e:
                st.error(f"L·ªói hi·ªÉn th·ªã t√≥m t·∫Øt: {str(e)}")
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu")
        
        st.markdown("---")

        
        if df_xu_ly is not None and st.button("T·∫°o m·∫´u d·ªØ li·ªáu"):
            try:
                mau = df_xu_ly.sample(min(1000, len(df_xu_ly)))
                csv = mau.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="T·∫£i xu·ªëng CSV",
                    data=csv,
                    file_name="mau_du_lieu.csv",
                    mime="text/csv"
                )
            except Exception as e:
                st.error(f"L·ªói t·∫°o m·∫´u: {str(e)}")
    
    # ƒêi·ªÅu h∆∞·ªõng trang
    if df_xu_ly is not None:
        if trang == "üè† T·ªïng quan":
            trang_tong_quan(df_xu_ly)
        elif trang == "üîå Thi·∫øt b·ªã":
            trang_thiet_bi(df_xu_ly)
        elif trang == "üå§Ô∏è Th·ªùi ti·∫øt":
            trang_thoi_tiet(df_xu_ly)
    else:
        st.error("Kh√¥ng t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra file d·ªØ li·ªáu v√† th·ª≠ l·∫°i.")

if __name__ == "__main__":
    main()