import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

import os
@st.cache_data
def load_data():
    try:
        # ƒê∆∞·ªùng d·∫´n t·ªõi file d·ªØ li·ªáu (ƒëi·ªÅu ch·ªânh cho ph√π h·ª£p)
        file_path = os.path.join("data", "HomeC.csv")
        
        # ƒê·ªçc d·ªØ li·ªáu
        data = pd.read_csv(file_path, low_memory=False)
        
        # X·ª≠ l√Ω d·ªØ li·ªáu
        data = data[:-1]  # X√≥a d√≤ng cu·ªëi n·∫øu c√≥ NaN
        
        # Chuy·ªÉn ƒë·ªïi c·ªôt time - x·ª≠ l√Ω l·ªói n·∫øu c√≥
        if 'time' in data.columns:
            try:
                # Th·ª≠ chuy·ªÉn ƒë·ªïi t·ª´ Unix timestamp
                data['datetime'] = pd.to_datetime(data['time'], unit='s', errors='coerce')
                
                # N·∫øu kh√¥ng th√†nh c√¥ng, th·ª≠ chuy·ªÉn ƒë·ªïi tr·ª±c ti·∫øp
                if data['datetime'].isnull().any():
                    data['datetime'] = pd.to_datetime(data['time'], errors='coerce')
                
                # ƒê·∫∑t index l√† datetime
                data = data.set_index('datetime')
                data = data.sort_index()
                
            except Exception as e:
                st.error(f"L·ªói chuy·ªÉn ƒë·ªïi th·ªùi gian: {str(e)}")
                # T·∫°o timeline m·∫´u n·∫øu c·∫ßn
                data['datetime'] = pd.date_range(start='2016-01-01', periods=len(data), freq='min')
                data = data.set_index('datetime')
        
        return data.dropna()
    
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu: {str(e)}")
        return None


def calculate_daily(df, power_col='use [kW]'):
    if power_col not in df.columns:
        return pd.DataFrame()
    # ƒê·∫£m b·∫£o ch·ªâ t√≠nh to√°n tr√™n c·ªôt s·ªë
    return df[[power_col]].resample('D').sum() / 60  # kW -> kWh

def main():
    st.set_page_config(layout="wide", page_title="Ph√¢n t√≠ch ƒëi·ªán nƒÉng")
    st.title("üìä B·ªô c√¥ng c·ª• ph√¢n t√≠ch ƒëi·ªán nƒÉng")
    
    data = load_data()
    if data is None:
        return
    
    if 'use [kW]' not in data.columns:
        st.error("Kh√¥ng t√¨m th·∫•y c·ªôt 'use [kW]' trong d·ªØ li·ªáu")
        st.write("C√°c c·ªôt s·ªë c√≥ s·∫µn:", data.columns.tolist())
        return
    
    st.sidebar.header("T√πy ch·ªçn hi·ªÉn th·ªã")
    min_date = data.index.min().date()
    max_date = data.index.max().date()
    
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input("T·ª´ ng√†y", min_date, min_value=min_date, max_value=max_date)
    with col2:
        end_date = st.date_input("ƒê·∫øn ng√†y", max_date, min_value=min_date, max_value=max_date)
    
    if start_date > end_date:
        st.error("Ng√†y k·∫øt th√∫c ph·∫£i sau ng√†y b·∫Øt ƒë·∫ßu!")
        return
    
    try:
        filtered = data.loc[f"{start_date}":f"{end_date}"]
        # Ch·ªâ l·∫•y c·ªôt s·ªë ƒë·ªÉ t√≠nh to√°n
        filtered = filtered.select_dtypes(include=['number'])
        daily_energy = calculate_daily(filtered)
        
        tab1, tab2 = st.tabs(["BI·ªÇU ƒê·ªí THEO NG√ÄY", "T·ªîNG H·ª¢P THEO NG√ÄY"])
        
        with tab1:
            # L·∫•y ng√†y c√≥ d·ªØ li·ªáu h·ª£p l·ªá
            valid_dates = pd.Series(filtered.index.date).unique()
            
            if len(valid_dates) == 0:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn")
                return
                
            selected_date = st.selectbox(
                "Ch·ªçn ng√†y ƒë·ªÉ xem chi ti·∫øt",
                options=valid_dates,
                format_func=lambda x: x.strftime("%d/%m/%Y")
            )
            
            hourly_data = filtered[filtered.index.date == selected_date]
            
            if not hourly_data.empty:
                fig1 = px.area(
                    hourly_data, 
                    x=hourly_data.index, 
                    y='use [kW]',
                    title=f"Di·ªÖn bi·∫øn c√¥ng su·∫•t ng√†y {selected_date.strftime('%d/%m/%Y')}",
                    labels={'use [kW]': 'C√¥ng su·∫•t (kW)'}
                )
                st.plotly_chart(fig1, use_container_width=True)
                
                daily_kWh = hourly_data['use [kW]'].sum() / 60
                st.metric("T·ªïng ti√™u th·ª•", f"{daily_kWh:.2f} kWh")
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†y ƒë∆∞·ª£c ch·ªçn")
        
        with tab2:
            if not daily_energy.empty:
                fig2 = px.bar(
                    daily_energy,
                    x=daily_energy.index,
                    y='use [kW]',
                    title=f"T·ªïng nƒÉng l∆∞·ª£ng ti√™u th·ª• t·ª´ {start_date.strftime('%d/%m/%Y')} ƒë·∫øn {end_date.strftime('%d/%m/%Y')}",
                    labels={'use [kW]': 'NƒÉng l∆∞·ª£ng (kWh)'}
                )
                st.plotly_chart(fig2, use_container_width=True)
                
                total = daily_energy['use [kW]'].sum()
                avg = daily_energy['use [kW]'].mean()
                
                cols = st.columns(3)
                cols[0].metric("T·ªïng nƒÉng l∆∞·ª£ng", f"{total:.2f} kWh")
                cols[1].metric("Trung b√¨nh ng√†y", f"{avg:.2f} kWh")
                cols[2].metric("S·ªë ng√†y", len(daily_energy))
            else:
                st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian n√†y")
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")

if __name__ == "__main__":
    main()